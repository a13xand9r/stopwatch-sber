{"version":3,"sources":["components/AppHeader.tsx","components/StopWatch.tsx","hooks/useStopWatch.ts","store/store.ts","context/storeContext.ts","App.tsx","hooks/useStore.ts","components/GlobalStyle.tsx","components/providers/StoreProvider.tsx","components/providers/Providers.tsx","index.tsx"],"names":["AppHeader","Header","back","title","FlexContainer","styled","div","TimeContainer","StopWatch","React","memo","useState","isGoing","setIsGoing","ms","setms","s","sets","m","setm","h","seth","interval","useRef","msRef","sRef","mRef","hRef","current","useEffect","clearInterval","setInterval","prev","startStopWatch","pauseStopWatch","stopStopWatch","useStopWatch","Body","style","fontSize","Button","view","text","onClick","initialState","character","aaa","reducer","state","action","type","characterId","StoreContext","createContext","App","useContext","Container","themes","sber","createGlobalStyle","darkSber","eva","darkEva","joy","darkJoy","DocumentStyle","background","gradient","GlobalStyles","Theme","useMemo","StoreProvider","children","useReducer","dispatch","Provider","value","Providers","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee5591fe.chunk.js","sourcesContent":["import { Header } from '@sberdevices/plasma-ui'\r\n\r\nexport const AppHeader = () => {\r\n\r\n  return (\r\n    <Header\r\n      back={false}\r\n      title={'Canvas App'}\r\n    />\r\n  )\r\n}","import { Body1, Button } from '@sberdevices/plasma-ui'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useStopWatch } from '../hooks/useStopWatch'\r\n\r\nconst FlexContainer = styled.div`\r\n    display: flex;\r\n    justify-content: space-around;\r\n    width: 70%;\r\n    margin: auto;\r\n    margin-bottom: 3rem;\r\n`\r\n\r\nconst TimeContainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background-color: #006eff4b;\r\n    border-radius: 0.8rem;\r\n    width: 4rem;\r\n    height: 5rem;\r\n`\r\n\r\nexport const StopWatch = React.memo(() => {\r\n\r\n    const {h, m, isGoing, ms, s, pauseStopWatch, startStopWatch, stopStopWatch} = useStopWatch()\r\n\r\n    return (\r\n        <>\r\n            <Body1 style={{fontSize: '2.2rem'}} >\r\n                <FlexContainer>\r\n                    <TimeContainer>{h}</TimeContainer>\r\n                    <TimeContainer>{m}</TimeContainer>\r\n                    <TimeContainer>{s > 10 ? '' : '0'}{s}</TimeContainer>\r\n                    <TimeContainer>{ms > 10 ? '' : '0'}{ms}</TimeContainer>\r\n                </FlexContainer>\r\n            </Body1>\r\n            {\r\n                isGoing ?\r\n                <FlexContainer>\r\n                    {/* <Button text='Старт' onClick={startStopWatch} /> */}\r\n                    <Button view='secondary' text='Пауза' onClick={pauseStopWatch} />\r\n                    <Button view='warning' text='Стоп' onClick={stopStopWatch} />\r\n                </FlexContainer> :\r\n                <Button view='success' text='Старт' onClick={startStopWatch} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n)\r\n\r\n// export const ComponentMemo = React.memo(Component)\r\n","import { useEffect, useRef, useState } from 'react'\r\n\r\n\r\nexport const useStopWatch = () => {\r\n    const [isGoing, setIsGoing] = useState(false)\r\n\r\n    const [ms, setms] = useState(0)\r\n    const [s, sets] = useState(0)\r\n    const [m, setm] = useState(0)\r\n    const [h, seth] = useState(0)\r\n\r\n    const interval = useRef<NodeJS.Timeout>()\r\n    const msRef = useRef(0)\r\n    const sRef = useRef(0)\r\n    const mRef = useRef(0)\r\n    const hRef = useRef(0)\r\n\r\n    msRef.current = ms\r\n    sRef.current = s\r\n    mRef.current = m\r\n    hRef.current = h\r\n\r\n    useEffect(() => {\r\n        interval.current && clearInterval(interval.current)\r\n        if (isGoing){\r\n            interval.current = setInterval(() => {\r\n                if (msRef.current < 99) {\r\n                    setms(prev => prev + 1)\r\n                } else {\r\n                    setms(0)\r\n                    sets(prev => prev + 1)\r\n                }\r\n            }, 10)\r\n        }\r\n    }, [isGoing])\r\n\r\n    const startStopWatch = () => {\r\n        setIsGoing(true)\r\n    }\r\n    const pauseStopWatch = () => {\r\n        setIsGoing(false)\r\n    }\r\n    const stopStopWatch = () => {\r\n        setIsGoing(false)\r\n        setms(0)\r\n        sets(0)\r\n        setm(0)\r\n        seth(0)\r\n    }\r\n\r\n    return {\r\n        ms,\r\n        s,\r\n        m,\r\n        h,\r\n        startStopWatch,\r\n        pauseStopWatch,\r\n        stopStopWatch,\r\n        isGoing\r\n    }\r\n}","import { ActionsType, CharacterType, StateType } from '../types/types'\r\n\r\n\r\nexport const initialState = {\r\n  character: 'sber' as CharacterType,\r\n  aaa: 0\r\n}\r\n\r\nexport const reducer = (state: StateType, action: ActionsType): StateType => {\r\n  switch (action.type) {\r\n    case 'SET_CHARACTER':\r\n      return {...state, character: action.characterId}\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport const actions = {\r\n  setCharacter: (characterId: CharacterType) => ({ type: 'SET_CHARACTER', characterId } as const),\r\n}","import { StateType, ActionsType } from './../types/types'\r\nimport React, { Dispatch } from 'react'\r\nimport { initialState } from '../store/store'\r\n\r\nexport const StoreContext = React.createContext<[StateType, Dispatch<ActionsType>]>([\r\n  initialState,\r\n  () => null\r\n])","// import { createAssistant } from '@sberdevices/assistant-client'\nimport { Button, Container, Headline1 } from '@sberdevices/plasma-ui'\n\nimport { useEffect, useRef, useState } from 'react'\nimport { initAssistant } from './assistant/assistant'\nimport { AppHeader } from './components/AppHeader'\nimport { StopWatch } from './components/StopWatch'\nimport { useStore } from './hooks/useStore'\n\nfunction App() {\n    const [state, dispatch] = useStore()\n    // const assistantRef = useRef<ReturnType<typeof createAssistant>>()\n\n    // useEffect(() => {\n    //     assistantRef.current = initAssistant(dispatch)\n    // }, [])\n    return (\n        <Container>\n            <AppHeader />\n            <StopWatch />\n        </Container>\n    )\n}\n\nexport default App\n","import { useContext } from 'react'\r\nimport { StoreContext } from '../context/storeContext'\r\n\r\nexport const useStore = () => {\r\n  return useContext(StoreContext)\r\n}","import { FC, useMemo } from 'react'\r\nimport { createGlobalStyle } from 'styled-components'\r\nimport { darkSber, darkEva, darkJoy } from '@sberdevices/plasma-tokens/themes'\r\nimport {\r\n  text, // Цвет текста\r\n  background, // Цвет подложки\r\n  gradient, // Градиент\r\n} from '@sberdevices/plasma-tokens'\r\nimport { CharacterType } from '../types/types'\r\n\r\nconst themes = {\r\n  sber: createGlobalStyle(darkSber),\r\n  eva: createGlobalStyle(darkEva),\r\n  joy: createGlobalStyle(darkJoy),\r\n}\r\n\r\nconst DocumentStyle = createGlobalStyle`\r\n  html:root {\r\n    padding-top: 1rem;\r\n    min-height: 100vh;\r\n    color: ${text};\r\n    background-color: ${background};\r\n    background-image: ${gradient};\r\n  }\r\n`\r\n\r\nexport const GlobalStyles: FC<{ character: CharacterType }> = ({ character }) => {\r\n  const Theme = useMemo(() => themes[character], [character])\r\n  return (\r\n    <>\r\n      <DocumentStyle />\r\n      <Theme />\r\n    </>\r\n  )\r\n}","import { ReactNode, useReducer } from 'react'\r\nimport { StoreContext } from '../../context/storeContext'\r\nimport { initialState, reducer } from '../../store/store'\r\nimport { GlobalStyles } from '../GlobalStyle'\r\n\r\nexport const StoreProvider = ({ children }: { children: ReactNode }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n  return <StoreContext.Provider value={[state, dispatch]}>\r\n    <GlobalStyles character={state.character} />\r\n    {children}\r\n  </StoreContext.Provider>\r\n}\r\n","import { DeviceThemeProvider } from '@sberdevices/plasma-ui'\r\nimport { ReactNode } from 'react'\r\nimport { StoreProvider } from './StoreProvider'\r\n\r\nexport const Providers = ({ children }: { children: ReactNode }) => {\r\n  return <StoreProvider>\r\n    <DeviceThemeProvider>\r\n      {children}\r\n    </DeviceThemeProvider>\r\n  </StoreProvider>\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Providers } from './components/providers/Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}